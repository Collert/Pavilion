"""
Django settings for Pavilion project.

Generated by 'django-admin startproject' using Django 4.2.8.

This file contains configuration settings for the Django project, including database setup,
installed applications, middleware, and other project-specific settings.
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from django.urls import reverse_lazy
import socket
from django.utils.translation import gettext_lazy as _

# Load environment variables from a .env file if present
load_dotenv()

# Define the base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent

# API Keys and Environment Variables (Ensure these are set in a .env file)
SQUARE_ACCESS_TOKEN = os.getenv('SQUARE_ACCESS_TOKEN')
SQUARE_ENVIRONMENT = os.getenv('SQUARE_ENVIRONMENT')
SQUARE_DEVICE_ID = os.getenv('SQUARE_DEVICE_ID')
SQUARE_LOCATION_ID = os.getenv('SQUARE_LOCATION_ID')
SQUARE_WEBHOOK_SIGNATURE_KEY = os.getenv('SQUARE_WEBHOOK_SIGNATURE_KEY')
SQUARE_APPLICATION_ID = os.getenv('SQUARE_APPLICATION_ID')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')
SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
VAPID_PUBLIC_KEY = os.getenv('VAPID_PUBLIC_KEY')
VAPID_PRIVATE_KEY = os.getenv('VAPID_PRIVATE_KEY')
APP_DOMAIN = os.getenv('APP_DOMAIN')

# Security settings
SECRET_KEY = 'django-insecure-)mvvs#%dtv$1s)5ak4%!&g63-!&%tn8wtn0s21&ux*=!#9$b^$'  # WARNING: Change this in production!
DEBUG = os.getenv('ENVIRONMENT') != "production"  # Debug mode enabled unless in production

# URL for media files (currently empty, should be set if needed)
MEDIA_URL = ''
MEDIA_ROOT = ""

# Icons from google fonts
AVAILABLE_ICONS = (
    ("kitchen", "Fridge"),
    ("local_cafe", "Cup"),
    ("coffee_maker", "Coffee maker"),
    ("soup_kitchen", "Soup scoop"),
    ("skillet", "Skillet"),
    ("blender", "Blender"),
    ("microwave", "Microwave"),
    ("faucet", "Faucet"),
    ("kettle", "Kettle"),
    ("dishwasher", "Dishwasher"),
    ("cake", "Cake"),
    ("cooking", "Cooking"),
    ("mode_heat", "Fire"),
    ("flatware", "Flatware"),
    ("outdoor_grill", "Grill"),
    ("table_bar", "Table"),
    ("deck", "Deck"),
    ("icecream", "Ice Cream"),
    ("dinner_dining", "Dinner"),
    ("sports_bar", "Beer"),
    ("liquor", "Liquor"),
    ("bakery_dining", "Croissant"),
    ("ramen_dining", "Ramen"),
    ("local_bar", "Bar"),
    ("lunch_dining", "Burger"),
    ("rice_bowl", "Rice"),
    ("wine_bar", "Wine glass")
)

# Default login redirect
LOGIN_URL = reverse_lazy('login_view')

# Allowed hosts - Restrict in production for security purposes
ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    APP_DOMAIN
]

# CSRF Trusted Origins (allows cross-origin requests from specified domains)
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000", 
    "http://127.0.0.1:3000",
    "https://6005-2605-8d80-482-cacb-58a-f30d-f46d-5a0d.ngrok-free.app",
    "https://{APP_DOMAIN}"
]

# Enable CORS for all origins (consider restricting this in production)
CORS_ALLOW_ALL_ORIGINS = True  # Allows any website to load fonts
CORS_ALLOW_CREDENTIALS = True

# Installed applications
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pos_server.apps.PosServerConfig',  # POS system module
    'webrtc',  # WebRTC communication
    'app_switcher',  # App switcher page module
    'misc_tools',  # Miscellaneous utilities
    'online_store',  # E-commerce store module
    'inventory',  # Inventory management
    'deliveries',  # Delivery system
    'users',  # User authentication and management
    'mathfilters',  # Additional math filters for templates
    'gift_cards',  # Gift card transactions
    'payments',  # Payment processing
    'events',  # Event handling
    'new_admin',  # Custom admin interface
]

# Middleware - Handles request processing, security, and session management
MIDDLEWARE = [
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Manages static files efficiently
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

X_FRAME_OPTIONS = 'SAMEORIGIN'  # Prevents iframe clickjacking attacks

WHITENOISE_ROOT = '/online_store'

ROOT_URLCONF = 'pavilion.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'online_store.context_processors.check_business_day',
            ],
        },
    },
]

WSGI_APPLICATION = 'pavilion.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if os.getenv('ENVIRONMENT') == "production":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB', 'pavilion_db'),
            'USER': os.getenv('POSTGRES_USER', 'pavilion_user'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'pavilion_pass'),
            'HOST': os.getenv('DB_HOST', 'db'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }
    NOTIFICATIONS_HOST = f"https://{APP_DOMAIN}"
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    NOTIFICATIONS_HOST = "http://127.0.0.1:8000"

if 'local.internal.uahelp.ca' in socket.gethostname().lower():
    SECURE_PROXY_SSL_HEADER = None
else:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

if os.getenv('ENVIRONMENT') == "production":
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {message}',
                'style': '{',
            },
            'simple': {
                'format': '[{asctime}] "{message}"',
                'style': '{',
                'datefmt': '%d/%b/%Y %H:%M:%S',
            },
        },
        'handlers': {
            'console': {
                'level': 'ERROR',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': os.path.join(BASE_DIR, 'logs', 'debug.log'),
                'formatter': 'simple',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console', 'file'],
                'level': 'ERROR',
                'propagate': False,
            },
            'django.request': {
                'handlers': ['console', 'file'],
                'level': 'ERROR',
                'propagate': False,
            },
            'django.server': {
                'handlers': ['console', 'file'],
                'level': 'ERROR',
                'propagate': False,
            },
        },
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Vancouver'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = [
    ('en', _('English')),
    ('uk', _('Ukrainian')),
    ('zh-HK', _('Cantonese (Hong Kong)')),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),  # Path for translation files
]

PO_FILE_IGNORE_PATTERNS = ["venv/*", "node_modules/*", "migrations/*", ".venv/*", "static/*", "media/*", "locale/*"]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') if os.getenv('ENVIRONMENT') == "production" else '/home/collert/POS/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'payments/static/'),
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',  # Any unique identifier; it differentiates caches if you have multiple ones
    }
}